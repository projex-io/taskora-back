name: Release on PR merge with label 'release'

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get PR labels
        id: get_labels
        run: |
          labels=$(jq -r '.pull_request.labels[].name' "$GITHUB_EVENT_PATH" | tr '\n' ' ')
          echo "labels=$labels" >> $GITHUB_OUTPUT

      - name: Check if 'release' label present
        id: check_label
        run: |
          echo "${{ steps.get_labels.outputs.labels }}" | grep -qw "release" && echo "release=true" >> $GITHUB_OUTPUT || echo "release=false" >> $GITHUB_OUTPUT

      - name: Exit if no release label
        if: steps.check_label.outputs.release != 'true'
        run: echo "No release label, skipping." && exit 0

      - name: Get branch name from PR head
        id: get_branch
        run: echo "branch_name=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT

      - name: Extract tag from branch name
        id: get_tag
        run: |
          branch="${{ steps.get_branch.outputs.branch_name }}"
          # Expected branch format rel/vX.Y.Z
          tag="${branch#rel/}"
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Create git tag and push
        env:
          TAG: ${{ steps.get_tag.outputs.tag }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$TAG"
          git push origin "$TAG"

      - name: Create GitHub release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: Release ${{ steps.get_tag.outputs.tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        env:
          TAG: ${{ steps.get_tag.outputs.tag }}
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/my-app:$TAG .
          docker push ghcr.io/${{ github.repository_owner }}/my-app:$TAG
