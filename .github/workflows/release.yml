name: Publish Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  publish_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get release notes from draft
        id: draft_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = context.ref.replace('refs/tags/', '');
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const draft = releases.find(r => r.draft);
            if (!draft) {
              core.setFailed('‚ùå Aucun draft trouv√©.');
              return;
            }

            core.setOutput('release_body', draft.body);
            core.setOutput('draft_id', draft.id);

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "üöÄ ${{ github.ref_name }}"
          body: ${{ steps.draft_release.outputs.release_body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete draft release
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseId = ${{ steps.draft_release.outputs.draft_id }};
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
            });
            console.log(`üóëÔ∏è Draft release #${releaseId} deleted.`);

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Gradle
        run: ./gradlew build
            
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image (versioned + latest)
        run: |
          VERSION=${{ github.ref_name }}
          IMAGE=ghcr.io/${{ github.repository }}  # ghcr.io/projex-io/taskora-back
          
          echo "üîß Building Docker image: $IMAGE:$VERSION and $IMAGE:latest"
          
          docker build -t $IMAGE:$VERSION .
          docker tag $IMAGE:$VERSION $IMAGE:latest
          docker push $IMAGE:$VERSION
          docker push $IMAGE:latest

