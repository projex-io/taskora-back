name: Auto-label Pull Request based on Commit Message

on:
  pull_request:
    types:
      - opened
      - synchronize

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  auto_label:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extraire et appliquer les alias comme labels
        run: |
          echo "üì¶ Lecture du commit de la branche source..."
          COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
          LAST_COMMIT_MESSAGE=$(git show --pretty=format:%s --no-patch "$COMMIT_SHA")

          echo "üîç Message du commit: $LAST_COMMIT_MESSAGE"

          # Table de correspondance des alias ‚Üí labels
          declare -A ALIAS_MAP
          ALIAS_MAP[fast]="auto-merge,no-draft"
          ALIAS_MAP[release]="release"

          # Extraire tous les #alias
          RAW_ALIASES=$(echo "$LAST_COMMIT_MESSAGE" | grep -o "#[a-zA-Z0-9_-]*" | tr -d "#" | xargs)
          echo "üîó Alias d√©tect√©s: $RAW_ALIASES"

          # Construire la liste des labels associ√©s
          FINAL_LABELS=()

          for alias in $RAW_ALIASES; do
            if [[ -n "${ALIAS_MAP[$alias]}" ]]; then
              IFS=',' read -r -a MAPPED_LABELS <<< "${ALIAS_MAP[$alias]}"
              FINAL_LABELS+=("${MAPPED_LABELS[@]}")
            else
              FINAL_LABELS+=("$alias")  # Peut √™tre un label direct
            fi
          done

          # Supprimer les doublons
          UNIQUE_LABELS=($(printf "%s\n" "${FINAL_LABELS[@]}" | sort -u))

          # V√©rifier les labels valides dans le repo
          echo "üì• R√©cup√©ration des labels existants dans le repo..."
          EXISTING_LABELS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/labels?per_page=100" | jq -r '.[].name')

          FILTERED_LABELS=()
          for label in "${UNIQUE_LABELS[@]}"; do
            if echo "$EXISTING_LABELS" | grep -Fxq "$label"; then
              FILTERED_LABELS+=("\"$label\"")
            else
              echo "‚ö†Ô∏è Label '$label' non trouv√©, ignor√©."
            fi
          done

          if [ ${#FILTERED_LABELS[@]} -eq 0 ]; then
            echo "‚ùå Aucun label valide √† appliquer."
            exit 0
          fi

          LABEL_JSON="{ \"labels\": [$(IFS=,; echo "${FILTERED_LABELS[*]}")] }"
          echo "$LABEL_JSON" > labels.json

          echo "üè∑Ô∏è Envoi des labels: ${FILTERED_LABELS[*]}"
          curl -s -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @labels.json \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels"
